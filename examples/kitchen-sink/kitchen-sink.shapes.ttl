@prefix : <http://example.com/> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shaclmate: <http://minorg.github.io/shaclmate/ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# Node shape that serves as an abstract base class for child node shapes
# It's marked abstract in TypeScript and not exported from the module.
:AbstractBaseClassWithPropertiesNodeShape
  a owl:Class ;
  a sh:NodeShape ;
  shaclmate:abstract true;
  shaclmate:export false ;
  # Common pattern: put the minting strategy and nodeKind on an ABC
  shaclmate:mintingStrategy shaclmate:SHA256 ;
  sh:name "AbstractBaseClassWithPropertiesNodeShape" ;
  sh:nodeKind sh:BlankNodeOrIRI ;
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "abcStringProperty" ; sh:path :abcStringProperty ] ;
.

:AbstractBaseClassWithoutPropertiesNodeShape
  a owl:Class ;
  a sh:NodeShape ;
  # Put the shape with properties above the shape without
  rdfs:subClassOf :AbstractBaseClassWithPropertiesNodeShape ;
  shaclmate:abstract true;
  shaclmate:export false ;
  sh:name "AbstractBaseClassWithoutPropertiesNodeShape" ;
.

# Child (class) of ParentClassNodeShape. Should inherit properties, node kinds, and minting strategy.
:ConcreteChildClassNodeShape
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:subClassOf :ConcreteParentClassNodeShape ;
  sh:name "ConcreteChildClassNodeShape" ;
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "childStringProperty" ; sh:path :childStringProperty ] ;
.

# Class node shape that inherits the abstract base class and is the parent of the ChildClassNodeShape.
:ConcreteParentClassNodeShape
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:subClassOf :AbstractBaseClassWithoutPropertiesNodeShape ;
  sh:name "ConcreteParentClassNodeShape" ;
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "parentStringProperty" ; sh:path :parentStringProperty ] ;
.

# Node shape that inlines/nests another node shape and externs/references another.
:ExterningAndInliningNodeShape
  a sh:NodeShape ;
  sh:name "ExterningAndInliningNodeShape" ;
  sh:property [
    shaclmate:inline false ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:node :ExterningAndInliningNodeShape-ExternNodeShape ;
    sh:name "externProperty" ;
    sh:path :externProperty
  ] ;
  sh:property [
    shaclmate:inline true ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:node :ExterningAndInliningNodeShape-InlineNodeShape ;
    sh:name "inlineProperty" ;
    sh:path :inlineProperty
  ] ;
.

:ExterningAndInliningNodeShape-ExternNodeShape
  a sh:NodeShape ;
  sh:name "ExternNodeShape" ;
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "stringProperty" ; sh:path :stringProperty ]
.

:ExterningAndInliningNodeShape-InlineNodeShape
  a sh:NodeShape ;
  sh:name "InlineNodeShape" ;
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "stringProperty" ; sh:path :stringProperty ]
.

# A node shape that only allows IRI identifiers.
:IriNodeShape
  a sh:NodeShape ;
  sh:name "IriNodeShape" ;
  sh:nodeKind sh:IRI ;
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "stringProperty" ; sh:path :stringProperty ] ;
.

# A native type in TypeScript
:KitchenSinkImportedType
  a sh:NodeShape ;
  sh:name "KitchenSinkImportedType" ;
  shaclmate:tsImport "import { KitchenSinkImportedType } from \"../KitchenSinkImportedType.js\";"
.

# A node shape that models an RDF list. Should be transformed into a list data structure when used as a property
# instead of surfacing the RDF list structure in code.
:ListShape
    a owl:Class, sh:NodeShape ;
    rdfs:subClassOf rdf:List ;
    sh:name "ListShape" ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:property :ListShape-first, :ListShape-rest .

:ListShape-first
    a sh:PropertyShape ;
    sh:datatype xsd:string ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:name "first" ;
    sh:path rdf:first .

:ListShape-rest
    shaclmate:inline true ;
    a sh:PropertyShape ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:name "rest" ;
    sh:or ([
            sh:class :ListShape
        ]
        [
            sh:hasValue ( )
        ]
    ) ;
    sh:path rdf:rest .

# Node shape that isn't an rdfs:Class.
:NonClassNodeShape
  a sh:NodeShape ;
  sh:name "NonClassNodeShape" ;
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "stringProperty" ; sh:path :stringProperty ] ;
.

# Shape with sh:defaultValue properties
:NodeShapeWithDefaultValueProperties
  a sh:NodeShape ;
  sh:name "NodeShapeWithDefaultValueProperties" ;
  sh:property [ sh:defaultValue false ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "falseBooleanProperty" ; sh:path :falseBooleanProperty ] ;
  sh:property [ sh:defaultValue "2018-04-09T10:00:00Z"^^xsd:dateTime ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "dateTimeProperty" ; sh:path :dateTimeProperty ] ;
  sh:property [ sh:defaultValue 0 ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "numberProperty" ; sh:path :numberProperty ] ;
  sh:property [ sh:defaultValue "" ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "stringProperty" ; sh:path :stringProperty ] ;
  sh:property [ sh:defaultValue true ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "trueBooleanProperty" ; sh:path :trueBooleanProperty ] ;
.

# Shape with sh:hasValue properties
:NodeShapeWithHasValueProperties
  a sh:NodeShape ;
  sh:name "NodeShapeWithHasValueProperties" ;
  sh:property [ sh:maxCount 1 ; sh:name "hasIriProperty" ; sh:hasValue :NodeShapeWithHasValuePropertiesIri1 ; sh:path :hasIriProperty ] ;
  sh:property [ sh:maxCount 1 ; sh:name "hasLiteralProperty" ; sh:hasValue "test" ; sh:path :hasLiteralProperty ] ;
.

# Shape with sh:in properties
:NodeShapeWithInProperties
  a sh:NodeShape ;
  sh:name "NodeShapeWithInProperties" ;
  sh:property [ sh:maxCount 1 ; sh:name "inBooleansProperty" ; sh:in ( true ) ; sh:path :inBooleansProperty ] ;
  sh:property [ sh:maxCount 1 ; sh:name "inDateTimesProperty" ; sh:in ( "2018-04-09T10:00:00Z"^^xsd:dateTime ) ; sh:path :inDateTimesProperty ] ;
  sh:property [ sh:maxCount 1 ; sh:name "inIrisProperty" ; sh:in ( :NodeShapeWithInPropertiesIri1 :NodeShapeWithInPropertiesIri2 ) ; sh:path :inIrisProperty ] ;
  sh:property [ sh:maxCount 1 ; sh:name "inNumbersProperty" ; sh:in ( 1 2 ) ; sh:path :inNumbersProperty ] ;
  sh:property [ sh:maxCount 1 ; sh:name "inStringsProperty" ; sh:in ( "text" "html" ) ; sh:path :inStringsProperty ] ;
.

# Shape that uses the ListShape in a property.
:NodeShapeWithListProperty
  a sh:NodeShape ;
  sh:name "NodeShapeWithListProperty" ;
  sh:property [ shaclmate:inline true ; sh:maxCount 1 ; sh:minCount 1 ; sh:node :ListShape ; sh:name "listProperty" ; sh:path :listProperty ]
.

# Shape with native properties
:NodeShapeWithImportedTypes
  a sh:NodeShape ;
  sh:name "NodeShapeWithImportedTypes" ;
  sh:property [ shaclmate:inline true ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "importedTypeProperty" ; sh:node :KitchenSinkImportedType ; sh:path :importedTypeProperty ] ;
.

# Shape with sh:or properties
:NodeShapeWithOrProperties
  a sh:NodeShape ;
  sh:name "NodeShapeWithOrProperties" ;
  sh:property [ sh:maxCount 1 ; sh:name "orLiteralsProperty" ; sh:or ( [ sh:datatype xsd:integer ] [ sh:datatype xsd:string ] ) ; sh:path :orLiteralsProperty ] ;
  sh:property [ sh:maxCount 1 ; sh:name "orTermsProperty" ; sh:or ( [ sh:nodeKind sh:Literal ] [ sh:nodeKind sh:IRI ] ) ; sh:path :orTermsProperty ] ;
  sh:property [ sh:maxCount 1 ; sh:name "orUnrelatedProperty" ; sh:or ( [ sh:datatype xsd:integer ] [ sh:nodeKind sh:IRI ] ) ; sh:path :orUnrelatedProperty ] ;
.

# Shape that has properties with different cardinalities
:NodeShapeWithPropertyCardinalities
  a sh:NodeShape ;
  sh:name "NodeShapeWithPropertyCardinalities" ;
  # Required: maxCount=minCount=1
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "requiredStringProperty" ; sh:path :requiredStringProperty ; ] ;
  # Option: maxCount=1 minCount=0
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 0 ; sh:name "optionalStringProperty" ; sh:path :optionalStringProperty ; ] ;
  # Set: minCount implicitly=0, no maxCount or maxCount > 1
  sh:property [ sh:datatype xsd:string ; sh:minCount 1 ; sh:name "setStringProperty" ; sh:path :setStringProperty ; ] ;
.

# Shape with properties that have visibility modifiers (private, protected, public)
:NodeShapeWithPropertyVisibilities
  a sh:NodeShape ;
  sh:name "NodeShapeWithPropertyVisibilities" ;
  sh:property [ shaclmate:visibility shaclmate:Protected ; sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "protectedProperty" ; sh:path :publicProperty ] ;
  sh:property [ shaclmate:visibility shaclmate:Private ; sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "privateProperty" ; sh:path :privateProperty ] ;
  sh:property [ shaclmate:visibility shaclmate:Public ; sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "publicProperty" ; sh:path :publicProperty ] ;
.

# Node that that sh:or's other node shapes. This will usually be generated as a discriminated union.
:OrNodeShape
  a sh:NodeShape ;
  sh:name "OrNodeShape" ;
  sh:or ( :OrNodeShapeMember1 :OrNodeShapeMember2 ) ;
.

:OrNodeShapeMember1
  a sh:NodeShape ;
  sh:name "OrNodeShapeMember1" ;
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "stringProperty1" ; sh:path :stringProperty1 ] ;
.

:OrNodeShapeMember2
  a sh:NodeShape ;
  sh:name "OrNodeShapeMember2" ;
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "stringProperty2" ; sh:path :stringProperty2 ] ;
.

# A node shape that mints its identifier by hashing (other) contents, if no identifier is supplied
:Sha256IriNodeShape
  a sh:NodeShape ;
  shaclmate:mintingStrategy shaclmate:SHA256 ;
  sh:nodeKind sh:IRI ;
  sh:name "Sha256IriNodeShape" ;
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "stringProperty" ; sh:path :stringProperty ] ;
.

# A node shape that mints its identifier by generating a v4 UUID, if no identifier is supplied
:UuidV4IriNodeShape
  a sh:NodeShape ;
  shaclmate:mintingStrategy shaclmate:UUIDv4 ;
  sh:nodeKind sh:IRI ;
  sh:name "UuidV4IriNodeShape" ;
  sh:property [ sh:datatype xsd:string ; sh:maxCount 1 ; sh:minCount 1 ; sh:name "stringProperty" ; sh:path :stringProperty ] ;
.
